class Solution:
    def find(self,x):
        if x == self.dic[x]:
            return x
        self.dic[x] = self.find(self.dic[x])
        return self.dic[x]
    def union(self,x,y):
        xp = self.find(x)
        yp = self.find(y)
        if xp in self.start and yp in self.start:
          
            if xp != yp:
                self.unimportant.add(xp)
                self.unimportant.add(yp)
            return 
        if xp in self.start:
            # self.size[xp] += self.size[yp]
            self.dic[yp] = xp
        else:
            # self.size[yp] = self.size[xp]
            self.dic[xp] = yp
         
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.dic = {x:x for x in range(len(graph))}
        self.size = {x:1 for x in range(len(graph))}
        self.start = set(initial)
        self.unimportant = set()
        for x in range(len(graph)):
            for y in range(len(graph)):
                if graph[x][y] == 1:
                    self.union(x,y)
        for key in self.dic:
            self.find(key)
        counter = {x:0 for x in self.start if x not in self.unimportant}
        _max = 0
        ans = 0
        for key in self.dic:
            if self.dic[key] in counter:
                counter[self.dic[key]] += 1
        _max = 0
        ans = -1
        for key in counter:
            if _max < counter[key]:
                _max = counter[key]
                ans = key
            elif _max == counter[key]:
                ans = min(ans,key)
        if ans == -1:
            ans = min(list(self.unimportant))
        return ans
